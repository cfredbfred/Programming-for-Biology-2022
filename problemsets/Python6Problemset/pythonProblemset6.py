#!/usr/bin/env python3

"""
mySet = set('AAATTTGGGCCC')
mySet2 = {'AAATTTGGGCCC'}


print(mySet)
print(mySet2)
"""

"""
setA = set([3, 14, 15, 9, 26, 5, 35, 9])
setB = set([60, 22, 14, 0, 9])

# set intersection
print(setA & setB)
# set difference
print(setA - setB)
# set union
print(setA | setB)
# set symmetrical difference
print(setA ^ setB)
"""

"""
DNA = 'GATGGGATTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGACAGAAACACTTTTCGTGGGGTTTTCCCCTCCCATGTGCTCAAGACTGGCGCTAAAAGTTTTGAGCTTCTCAAAAGTCTAGAGCCACCGTCCAGGGAGCAGGTAGCTGCTGGGCTCCGGGGACACTTTGCGTTCGGGCTGGGAGCGTGCTTTCCACGACGGTGACACGCTTCCCTGGATTGGCAGCCAGACTGCCTTCCGGGTCACTGCCATGGAGGAGCCGCAGTCAGATCCTAGCGTCGAGCCCCCTCTGAGTCAGGAAACATTTTCAGACCTATGGAAACTACTTCCTGAAAACAACGTTCTGTCCCCCTTGCCGTCCCAAGCAATGGATGATTTGATGCTGTCCCCGGACGATATTGAACAATGGTTCACTGAAGACCCAGGTCCAGATGAAGCTCCCAGAATTCGCCAGAGGCTGCTCCCCCCGTGGCCCCTGCACCAGCAGCTCCTACACCGGCGGCCCCTGCACCAGCCCCCTCCTGGCCCCTGTCATCTTCTGTCCCTTCCCAGAAAACCTACCAGGGCAGCTACGGTTTCCGTCTGGGCTTCTTGCATTCTGGGACAGCCAAGTCTGTGACTTGCACGTACTCCCCTGCCCTCAACAAGATGTTTTGCCAACTGGCCAAGACCTGCCCTGTGCAGCTGTGGGTTGATTCCACACCCCCGCCCGGCACCCGCGTCCGCGCCATGGCCATCTACAAGCAGTCACAGCACATGACGGAGGTTGTGAGGCGCTGCCCCCACCATGAGCGCTGCTCAGATAGCGATGGTCTGGCCCCTCCTCAGCATCTTATCCGAGTGGAAGGAAATTTGCGTGTGGAGTATTTGGATGAC'
DNA_set = set(DNA)
print(DNA_set)
"""

"""
DNA = 'GAACTCCAAAAATGAAAACATAGTAGCAATCAAAGCATCCCACTATTTTTTGTCTCTCGTTTCATTAGCGTTGTAAATTACTGATACCCTACTATACCTCTACAAGGCCTTTGTCATCTTTTTACTCAAGTGTGAAATCATCACTTATTGTATGAAGGATGAGCTTTCCGTTCGCTAGTTTGCTGAAAAGGCCTTCTGCAATAAGCTCTCTATTATCTTTAAAAAAACCTGGTTCCTGGTCTTCCATTCTGCTAAAAGCTGTAGGGGTTTTATCACGAGATTCCCGTTGGCATTCTGACTTATTAAAAATGCTTACAGAAGAAATGGATTCTTTAAATGGTCAAATTAATACGTGGACAGATAATAATCCTTTATTAGATGAAATTACGAAGCCATACAGAAAATCTTCAACTCGTTTTTTTCATCCGCTTCTTGTACTTCTAATGTCTAGAGCATCAGTAAATGGGGATCCACCGAGTCAGCAACTATTTCAAAGGTACAAACAACTTGCCCGTGTAACAGAATTGATTCATGCTGCCAATATAATTCATATTAATATTGGAGAAGAACAAAGCAACGAACAGATTAAACTTGCAACGTTGGTTGGAGATTATTTACTCGGAAAGGCGTCTGTTGATTTAGCACATTTAGAAAACAACGCTATTACAGAAATTATGGCTTCTGTTATTGCAAACTTAGTTGAAGGGCACTTCGGAAGCCGACAAAATGGCTCTGTTGGTTTGTCAAACGAACGAACCATCCTTCTGCAATCAGCCTTTATGCCAGCAAAGGCATGTTTATGCGCAAGCATATTGAATAACTCATCACAATACATTAATGATGCGTGTTTCAATTATGGAAAATTTCTAGGCTTATCGCTGCAACTGGCCCATAAGCCTGTATCTCCTGACGCCCAAGTTTTGCAAAAGAATAATGACATTTTGAAAACATATGTTGAGAATGCCAAGAGCTCATTGTCTGTTTTCCCCGATATAGAGGCTAAGCAAGCTCTCATGGAAATCGCTAATAGTGTTTCGAAGTAATCGACAGGTATTGTATCCTGGATTAATATTAGGGTGGCTCATGCATGCTCGTGCAATCGTAACAAATATGTCTTTCTTTTACGAATTTTAACGCTTCAATATAAATCATATTTTTCCTCA'

unique_bases = set(DNA)

base_count_dict = {}
for base in unique_bases:
    base_count_dict[base] = DNA.count(base)

GC_count = (DNA.count('G')) + (DNA.count('C'))
GC_content = 100 * (GC_count / len(DNA))

print(base_count_dict)
print(GC_content)
"""

'''
with open ('Python_06.txt', 'r') as song_file, open ('New_Song_file.txt', 'w') as new_song_file:
    for line in song_file:
        stripped_line = line.strip()
        upper_stripped_line = stripped_line.upper()
        print(upper_stripped_line)
        new_song_file.write(upper_stripped_line)
'''
'''
line_count = 0
line_characters = []

with open ('Python_06.fastq.txt', 'r') as fastq_file:
    for line in fastq_file:
        line_count += 1
        line_characters.append(len(line))

total_characters = sum(line_characters)
average_line_length = total_characters / len(line_characters)

print(line_count)
print(total_characters)
print(average_line_length)
'''


'''
# fasta file parser

fasta_dict = {}
accession_list = []
sequence_list = []

with open (input('provide fasta file: '), 'r') as fasta_file:
    for line in fasta_file:
        if line[0] == '>':
            minimal_line = line.replace('>', '')
            stripped_line = minimal_line.strip()
            accession_list.append(stripped_line)
        else:
            sequence_list.append(line.strip())

for i in range (0, len(accession_list)):
    fasta_dict[accession_list[i]] = sequence_list[i]

print(fasta_dict)

'''

all_genes_list = []
pigmentation_genes_list = []
stemcell_genes_list = []

with open ('alpaca_all_genes.tsv', 'r') as AG_file:
    for line in AG_file:
        stripped_line = line.strip()
        all_genes_list.append(stripped_line)

all_genes_set = set(all_genes_list)

with open ('alpaca_pigmentation_genes.tsv', 'r') as AP_file:
    for line in AP_file:
        stripped_line = line.strip()
        pigmentation_genes_list.append(stripped_line)

pigmentation_genes_set = set(pigmentation_genes_list)

with open ('alpaca_stemcellproliferation_genes.tsv', 'r') as AS_file:
    for line in AS_file:
        stripped_line = line.strip()
        stemcell_genes_list.append(stripped_line)

stemcell_genes_set = set(stemcell_genes_list)

non_SC_genes = all_genes_set - stemcell_genes_set
print(non_SC_genes)
SC_and_pigment_genes = stemcell_genes_set & pigmentation_genes_set
print(SC_and_pigment_genes)




